(()=>{"use strict";class t{constructor(t){this.cta=t.cta,this.hours=t.hours,this.message=t.message,this.name=t.name,this.phone=t.phone,this.schedule=t.schedule}get isEnabled(){var t,e;const a=new Date;if(!(null===(t=null==this?void 0:this.schedule)||void 0===t?void 0:t.length)||!(null===(e=null==this?void 0:this.schedule[a.getDay()])||void 0===e?void 0:e.length))return!0;const[s,n]=[this.schedule[a.getDay()][0].split(":"),this.schedule[a.getDay()][1].split(":")],[i,c]=[new Date(a.getFullYear(),a.getMonth(),a.getDate()<10?0+a.getDate():a.getDate(),+s[0],+s[1]),new Date(a.getFullYear(),a.getMonth(),a.getDate()<10?0+a.getDate():a.getDate(),+n[0],+n[1])];return a.getTime()>=i.getTime()&&a.getTime()<=c.getTime()}render(){return document.createRange().createContextualFragment(`<a href="#" data-phone="${this.phone}" data-title="${this.name}" data-message="${this.message}" class="wa-w_a_a js-owaa" title="${this.name} ${this.phone}">\n\t\t\t<span class="wa-w_a_a_i"><span class="wa-w-i wa-w-i-cc"></span></span>\n\t\t\t<span class="wa-w_a_a_c">\n\t\t\t\t<span class="a_t">${this.name}</span>\n\t\t\t\t<span class="a_s">${this.hours}</span>\n\t\t\t\t<span class="a_c">${this.cta}<span class="a_c_i wa-w-i wa-w-i-e"></span></span>\n\t\t\t</span>\n\t\t</a>`)}}var e,a,s,n,i,c,l,h,r=function(t,e,a,s){if("a"===a&&!s)throw new TypeError("Private accessor was defined without a getter");if("function"==typeof e?t!==e||!s:!e.has(t))throw new TypeError("Cannot read private member from an object whose class did not declare it");return"m"===a?s:"a"===a?s.call(t):s?s.value:e.get(t)};e=new WeakSet,a=function(){let e=0;return this.agents.forEach((a=>{new t(a).isEnabled&&e++})),e},s=function(){const e=document.createElement("section");return e.classList.add("wa-w_a"),this.agents.forEach((a=>{new t(a).isEnabled&&e.append(new t(a).render())})),e},n=function(){return document.createRange().createContextualFragment(`<button class="wa-w_b" title="${this.title}">\n\t\t\t<span class="wa-w-i wa-w-i-w"></span>\n\t\t</button>`)},i=function(){var t;"dataLayer"in window&&(null===(t=window.dataLayer)||void 0===t||t.push({event:"ga_event",category:"Widget WhatsApp",action:"Click WhatsApp",label:"Click Icono"})),this.widget.classList.toggle("open")},c=function({message:t="",phone:e="",title:a=""}){var s;"dataLayer"in window&&(null===(s=window.dataLayer)||void 0===s||s.push({event:"ga_event",category:"Widget WhatsApp",action:"Click WhatsApp",label:a}));const n=t.length?`?text=${t}`:"";window.open(`https://wa.me/${e.replace(/ /g,"").replace("+","")}${n}`,"_blank")},l=function(){return document.createRange().createContextualFragment(`<header class="wa-w_h">\n\t\t\t<span class="wa-w_h_t">${this.title}</span>\n\t\t\t<span class="wa-w_h_s">\n\t\t\t\t<span class="wa-w_h_i wa-w-i wa-w-i-w"></span>\n\t\t\t\t${this.description}\n\t\t\t</span>\n\t\t</header>`)},h=function(){if(!document.getElementById(this.package)){const t=document.head,e=document.createElement("link");e.id=this.package,e.rel="stylesheet",e.type="text/css",e.href=`${this.url}@${this.version}/dist/css/${this.package}.css`,e.media="all",t.appendChild(e)}},window.whatsapp=class{constructor(t){e.add(this),this.package="whatsapp-widget",this.url="https://cdn.jsdelivr.net/gh/miguelcolmenares/whatsapp-widget",this.version="3.2.4",this.agents=t.agents||[],this.description=t.description||"Chatea con nosotros por Whatsapp",this.title=t.title||"Â¿Necesitas ayuda?",this.agents.length&&0!==r(this,e,"m",a).call(this)&&this.render()}get widget(){return this.$widget}set widget(t){this.$widget=t}render(){var t;r(this,e,"m",h).call(this);const a=document.createElement("div");a.classList.add("wa-w"),a.append(r(this,e,"m",l).call(this)),a.append(r(this,e,"m",s).call(this)),a.append(r(this,e,"m",n).call(this)),document.body.append(a),null===(t=a.querySelector(".wa-w_b"))||void 0===t||t.addEventListener("click",(()=>{r(this,e,"m",i).call(this)}));const o=a.querySelectorAll(".js-owaa");return o&&o.forEach((t=>{t.addEventListener("click",(a=>{a.preventDefault();const{message:s,phone:n,title:i}=t.dataset;r(this,e,"m",c).call(this,{message:s,phone:n,title:i})}))})),this.widget=a}}})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
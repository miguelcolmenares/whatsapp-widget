(()=>{"use strict";var t={726:function(t,e,a){var n;!function(s){if("function"!=typeof i){var i=function(t){return t};i.nonNative=!0}const r=i("plaintext"),c=i("html"),o=i("comment"),l=/<(\w*)>/g,h=/<\/?([^\s\/>]+)/;function d(t,e,a){return u(t=t||"",p(e=e||[],a=a||""))}function p(t,e){return{allowable_tags:t=function(t){let e=new Set;if("string"==typeof t){let a;for(;a=l.exec(t);)e.add(a[1])}else i.nonNative||"function"!=typeof t[i.iterator]?"function"==typeof t.forEach&&t.forEach(e.add,e):e=new Set(t);return e}(t),tag_replacement:e,state:r,tag_buffer:"",depth:0,in_quote_char:""}}function u(t,e){if("string"!=typeof t)throw new TypeError("'html' parameter must be a string");let a=e.allowable_tags,n=e.tag_replacement,s=e.state,i=e.tag_buffer,l=e.depth,h=e.in_quote_char,d="";for(let e=0,p=t.length;e<p;e++){let p=t[e];if(s===r)"<"===p?(s=c,i+=p):d+=p;else if(s===c)switch(p){case"<":if(h)break;l++;break;case">":if(h)break;if(l){l--;break}h="",s=r,i+=">",a.has(w(i))?d+=i:d+=n,i="";break;case'"':case"'":h=p===h?"":h||p,i+=p;break;case"-":"<!-"===i&&(s=o),i+=p;break;case" ":case"\n":if("<"===i){s=r,d+="< ",i="";break}i+=p;break;default:i+=p}else s===o&&(">"===p?("--"==i.slice(-2)&&(s=r),i=""):i+=p)}return e.state=s,e.tag_buffer=i,e.depth=l,e.in_quote_char=h,d}function w(t){let e=h.exec(t);return e?e[1].toLowerCase():null}d.init_streaming_mode=function(t,e){let a=p(t=t||[],e=e||"");return function(t){return u(t||"",a)}},void 0===(n=function(){return d}.call(e,a,e,t))||(t.exports=n)}()}},e={};function a(n){var s=e[n];if(void 0!==s)return s.exports;var i=e[n]={exports:{}};return t[n].call(i.exports,i,i.exports,a),i.exports}a.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return a.d(e,{a:e}),e},a.d=(t,e)=>{for(var n in e)a.o(e,n)&&!a.o(t,n)&&Object.defineProperty(t,n,{enumerable:!0,get:e[n]})},a.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),(()=>{var t=a(726),e=a.n(t);class n{constructor(t){this.cta=t.cta,this.hours=t.hours,this.message=t.message,this.name=t.name,this.phone=t.phone,this.schedule=t.schedule}get isEnabled(){var t,e;const a=new Date;if(!(null===(t=null==this?void 0:this.schedule)||void 0===t?void 0:t.length)||!(null===(e=null==this?void 0:this.schedule[a.getDay()])||void 0===e?void 0:e.length))return!0;const[n,s]=[this.schedule[a.getDay()][0].split(":"),this.schedule[a.getDay()][1].split(":")],[i,r]=[new Date(a.getFullYear(),a.getMonth(),a.getDate()<10?0+a.getDate():a.getDate(),+n[0],+n[1]),new Date(a.getFullYear(),a.getMonth(),a.getDate()<10?0+a.getDate():a.getDate(),+s[0],+s[1])];return a.getTime()>=i.getTime()&&a.getTime()<=r.getTime()}render(){return document.createRange().createContextualFragment(`<a href="#" data-phone="${e()(this.phone)}" data-title="${e()(this.name)}" data-message="${e()(this.message)}" class="wa-w_a_a js-owaa" title="${e()(this.name)} ${e()(this.phone)}">\n\t\t\t<span class="wa-w_a_a_i"><span class="wa-w-i wa-w-i-cc"></span></span>\n\t\t\t<span class="wa-w_a_a_c">\n\t\t\t\t<span class="a_t">${e()(this.name)}</span>\n\t\t\t\t<span class="a_s">${e()(this.hours)}</span>\n\t\t\t\t<span class="a_c">${e()(this.cta)}<span class="a_c_i wa-w-i wa-w-i-e"></span></span>\n\t\t\t</span>\n\t\t</a>`)}}var s,i,r,c,o,l,h,d,p=function(t,e,a,n){if("a"===a&&!n)throw new TypeError("Private accessor was defined without a getter");if("function"==typeof e?t!==e||!n:!e.has(t))throw new TypeError("Cannot read private member from an object whose class did not declare it");return"m"===a?n:"a"===a?n.call(t):n?n.value:e.get(t)};s=new WeakSet,i=function(){let t=0;return this.agents.forEach((e=>{new n(e).isEnabled&&t++})),t},r=function(){const t=document.createElement("section");return t.classList.add("wa-w_a"),this.agents.forEach((e=>{new n(e).isEnabled&&t.append(new n(e).render())})),t},c=function(){return document.createRange().createContextualFragment(`<button class="wa-w_b" title="${e()(this.title)}">\n\t\t\t<span class="wa-w-i wa-w-i-w"></span>\n\t\t</button>`)},o=function(){var t;"dataLayer"in window&&(null===(t=window.dataLayer)||void 0===t||t.push({event:"ga_event",category:"Widget WhatsApp",action:"Click WhatsApp",label:"Click Icono"})),this.widget.classList.toggle("open")},l=function({message:t="",phone:a="",title:n=""}){var s;"dataLayer"in window&&(null===(s=window.dataLayer)||void 0===s||s.push({event:"ga_event",category:"Widget WhatsApp",action:"Click WhatsApp",label:n}));const i=t.length?`?text=${e()(t)}`:"";window.open(`https://wa.me/${a.replace(/ /g,"").replace("+","")}${e()(i)}`,"_blank")},h=function(){return document.createRange().createContextualFragment(`<header class="wa-w_h">\n\t\t\t<span class="wa-w_h_t">${e()(this.title)}</span>\n\t\t\t<span class="wa-w_h_s">\n\t\t\t\t<span class="wa-w_h_i wa-w-i wa-w-i-w"></span>\n\t\t\t\t${e()(this.description)}\n\t\t\t</span>\n\t\t</header>`)},d=function(){if(!document.getElementById(this.package)){const t=document.head,e=document.createElement("link");e.id=this.package,e.rel="stylesheet",e.type="text/css",e.href=`${this.url}@${this.version}/dist/css/${this.package}.css`,e.media="all",t.appendChild(e)}},window.whatsapp=class{constructor(t){s.add(this),this.package="whatsapp-widget",this.url="https://cdn.jsdelivr.net/gh/miguelcolmenares/whatsapp-widget",this.version="3.3.0",this.agents=t.agents||[],this.description=t.description||"Chatea con nosotros por Whatsapp",this.title=t.title||"Â¿Necesitas ayuda?",this.agents.length&&0!==p(this,s,"m",i).call(this)&&this.render()}get widget(){return this.$widget}set widget(t){this.$widget=t}render(){var t;p(this,s,"m",d).call(this);const e=document.createElement("div");e.classList.add("wa-w"),e.append(p(this,s,"m",h).call(this)),e.append(p(this,s,"m",r).call(this)),e.append(p(this,s,"m",c).call(this)),document.body.append(e),null===(t=e.querySelector(".wa-w_b"))||void 0===t||t.addEventListener("click",(()=>{p(this,s,"m",o).call(this)}));const a=e.querySelectorAll(".js-owaa");return a&&a.forEach((t=>{t.addEventListener("click",(e=>{e.preventDefault();const{message:a,phone:n,title:i}=t.dataset;p(this,s,"m",l).call(this,{message:a,phone:n,title:i})}))})),this.widget=e}}})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,